import PredicateFlow

// swiftlint:disable all

{% macro createValueForArrayProperty variable type %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}{% if variable.typeName.array.elementType.implements.PredicateSchema %}Schema{% endif %}> { return builder.collection("{{ variable.name }}") }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}{% if variable.typeName.array.elementType.implements.PredicateSchema %}Schema{% endif %}> { return {{ type.name }}Schema().{{ variable.name }} }
{% endmacro %}
{% macro createValueForObjectProperty variable type %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: ObjectProperty<{{ variable.type.name }}Schema> { return builder.object("{{ variable.name }}") }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: ObjectProperty<{{ variable.type.name }}Schema> { return {{ type.name }}Schema().{{ variable.name }} }
{% endmacro %}
{% macro createValueForCustomProperty variable type obj %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: {{ obj }}PredicateProperty { return builder.{{ obj|lowerFirstLetter }}("{{ variable.name }}") }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: {{ obj }}PredicateProperty { return {{ type.name }}Schema().{{ variable.name }} }
{% endmacro %}
{% macro createValueForGenericProperty variable type %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: PredicateProperty<{{ variable.unwrappedTypeName }}> { return builder.generic("{{ variable.name }}") }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: PredicateProperty<{{ variable.unwrappedTypeName }}> { return {{ type.name }}Schema().{{ variable.name }} }
{% endmacro %}
{% for type in types.implementing.PredicateSchema %}
/// The "{{ type.name }}" Predicate Schema
{{ type.accessLevel }} struct {{ type.name }}Schema: GeneratedPredicateSchema {
    
    /// DO NOT USE THIS PROPERTY DIRECTLY!
    /// Instead use builder if you need to build a predicate property
    {{ type.accessLevel }} private(set) var compoundFieldBuilder: CompoundFieldBuilder

    /// DO NOT USE THIS INIT DIRECTLY!
    {{ type.accessLevel }} init(compoundFieldBuilder: CompoundFieldBuilder) { self.compoundFieldBuilder = compoundFieldBuilder }

{% for variable in type.storedVariables %}
{% if variable.isArray %}
{% call createValueForArrayProperty variable type %}
{% elif variable.type.implements.PredicateSchema %}
{% call createValueForObjectProperty variable type %}
{% elif variable.unwrappedTypeName == "Bool" %}
{% call createValueForCustomProperty variable type "Bool" %}
{% elif variable.unwrappedTypeName == "String" %}
{% call createValueForCustomProperty variable type "String" %}
{% elif variable.unwrappedTypeName == "Int" or variable.unwrappedTypeName == "Float" or variable.unwrappedTypeName == "Double" or variable.unwrappedTypeName == "Date" or variable.unwrappedTypeName == "UInt" or variable.unwrappedTypeName == "Int8" or variable.unwrappedTypeName == "UInt8" or variable.unwrappedTypeName == "Int16" or variable.unwrappedTypeName == "UInt16" or variable.unwrappedTypeName == "Int32" or variable.unwrappedTypeName == "UInt32" or variable.unwrappedTypeName == "Int64" or variable.unwrappedTypeName == "UInt64" %}
{% call createValueForGenericProperty variable type %}
{% else %}
    // [!!!WARNING!!!] Skipping "{{ variable.name }}" [type: {{ variable.unwrappedTypeName }}]
{% endif %}
{% endfor %}
}

{% endfor %}
